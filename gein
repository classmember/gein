#!/usr/bin/env sh

Bootstrap() {
    # Confirm the user has setup their disks
    read -ep "Proceed with installation? [Y/N]: " Proceed && \
    if echo $Proceed | grep -iq "^n" ; then exit; fi

    # Set time via ntpd
    ntpd -q -g

    # Download and extract stage3 tarball
    cd /mnt/gentoo
    S3_ARCH="amd64" && S3_DATE="20170727"
    wget http://distfiles.gentoo.org/releases/${S3_ARCH}/autobuilds/${S3_DATE}/stage3-${S3_ARCH}-nomultilib-${S3_DATE}.tar.bz2 && \
      tar xvjpf stage3-*.tar.bz2 --xattrs --numeric-owner

    # Mount hardware devices
    mount -t proc /proc /mnt/gentoo/proc && \
    mount --rbind /sys /mnt/gentoo/sys && \
    mount --make-rslave /mnt/gentoo/sys && \
    mount --rbind /dev /mnt/gentoo/dev && \
    mount --make-rslave /mnt/gentoo/dev

    # Setup '/swapfile'
    SwapFile="/mnt/gentoo/swapfile"
    if [ ! -e $SwapFile ]; then
        fallocate -l 4096M $SwapFile && \
        mkswap $SwapFile && \
        chmod 0600 $SwapFile && \
        swapon $SwapFile
    fi

    # Configure Portage
    wget -O /mnt/gentoo/etc/portage/make.conf \
      https://raw.githubusercontent.com/jcmdln/gein/master/etc/portage/make.conf
    wget -O /mnt/gentoo/etc/portage/package.use \
      https://raw.githubusercontent.com/jcmdln/gein/master/etc/portage/package.use
    #wget -0 /mnt/gentoo/etc/portage/package.env \
    #  https://raw.githubusercontent.com/jcmdln/gein/master/etc/portage/package.env

    # Setup Portage mirrors
    mirrorselect -i -o >> /mnt/gentoo/etc/portage/make.conf && \
    mkdir -vp /mnt/gentoo/etc/portage/repos.conf && \
    cp -v /mnt/gentoo/usr/share/portage/config/repos.conf \
      /mnt/gentoo/etc/portage/repos.conf/gentoo.conf && \
    cp -vL /etc/resolv.conf /mnt/gentoo/etc/

    # Chroot into '/mnt/gentoo'
    cd /mnt/gentoo && chroot /mnt/gentoo /bin/bash
}

Minimal() {
    # Automate counting available cores and other hardware tasks
    echo "CPU_CORES=$(grep -c ^processor /proc/cpuinfo)" >> /etc/profile

    # Reload profile and update PS1
    source /etc/profile && export PS1="(chroot) $PS1"

    # Sync Portage and select profile
    emerge-webrsync && \
    eselect profile list && \
    read -ep "Which profile?: " Target_Profile && \
    eselect profile set $Target_Profile && \
    emerge --ask --verbose --update --deep --newuse @world

    # Set desired timezone
    ls /usr/share/zoneinfo && \
    read -ep "Target region: " Target_Region && \
    ls /usr/share/zoneinfo/${Target_Region} && \
    read -ep "Target city: " Target_City && \
    TimeZone=${Target_Region}"/"${Target_City} && \
    echo "${TimeZone}" > /etc/timezone && \
    emerge --config sys-libs/timezone-data

    # Set desired locales
    nano /etc/locale.gen && \
    locale-gen && locale -a && \
    eselect locale list && \
    read -ep "Target locale: " Target_Locale && \
    eselect locale set ${Target_Locale}

    # Update environment
    env-update && \
    source /etc/profile && \
    export PS1="(chroot) $PS1"

    # Emerge and install Linux kernel
    emerge --ask --verbose \
      sys-kernel/gentoo-sources \
      sys-kernel/linux-firmware \
      sys-apps/pciutils \
      sys-kernel/genkernel &&
    cd /usr/src/linux && \
    make -j${CPU_CORES} defconfig && \
    make -j${CPU_CORES} menuconfig && \
    make -j${CPU_CORES} && \
    make -j${CPU_CORES} modules_install && \
    make -j${CPU_CORES} install && \
    genkernel --install initramfs

    # Configure '/etc/fstab/'
    echo "/swapfile none swap sw 0 0" >> /etc/fstab && \
      nano /etc/fstab

    # Install neworking packages &
    emerge --ask --verbose --noreplace net-misc/netifrc && \
    emerge --ask --verbose net-misc/dhcpcd

    # Set desired hostname and update '/etc/hosts'
    read -ep "Hostname: " Target_Hostname && \
    echo hostname="$Target_Hostname" > /etc/conf.d/hostname

    # Configure and install Grub
    emerge --ask --verbose sys-boot/grub:2 && \
    read -ep "Where to install Grub: " Grub_Target && \
    grub-install $Grub_Target && \
    grub-mkconfig -o /boot/grub/grub.cfg

    # Install 'sudo' and if CPU is Intel, install microcode
    emerge --ask --verbose sudo
    if grep -Rqi 'intel' /proc/cpuinfo; then
        emerge --ask --verbose intel-microcode
    fi

    # Set root password and optionally setup user
    passwd
    read -ep "Setup a standard user? [Y/N]: " Proceed
    if echo $Proceed | grep -iq "^y"; then
        read -ep "Username: " Target_User && \
        useradd -m -G wheel $Target_User && \
        passwd $Target_User
    fi
}

Desktop() {
    MAKEOPTS="-j1" emerge --ask dev-util/cmake
    emerge --ask --verbose \
      x11-base/xorg-drivers \
      x11-misc/xdotool \
      x11-misc/wmctrl && \
    env-update && \
    source /etc/profile && \
    export PS1="(chroot) $PS1" && \
    emerge --ask --verbose \
      app-editors/vim
      app-misc/ranger \
      app-misc/tmux \
      app-text/xmlto \
      dev-vcs/git \
      media-fonts/dejavu \
      media-gfx/scrot \
      media-libs/harfbuzz \
      media-libs/imlib2 \
      media-sound/alsa-utils \
      media-sound/cmus \
      media-video/ffmpeg \
      media-video/mpv \
      net-misc/curl \
      net-misc/youtube-dl \
      sys-libs/zlib \
      www-client/chromium \
      www-client/elinks \
      www-plugins/adobe-flash
      x11-libs/cairo \
      x11-libs/libxcb \
      x11-libs/libxkbcommon \
      x11-libs/pango \
      x11-misc/dmenu \
      x11-misc/i3lock \
      x11-misc/i3status \
      x11-term/rxvt-unicode \
      x11-wm/i3
}

Laptop() {
    emerge --ask --verbose \
      app-laptop/laptop-mode-tools \
      net-wireless/wpa_supplicant \
      net-misc/connman && \
    rc-update add laptop_mode default
}

#Server() {}
#Virtual() {}

Cleanup() {
    rm -rf /usr/portage/packages/* \
      /usr/portage/distfiles/* \
      /var/tmp/portage/* \
      /stage3*.tar.bz2

    emerge -uDN @world && \
    emerge -av --depclean && \
    emerge --update --changed-use --deep @world
}


## Execution #####################################

case $1 in
    bootstrap | -b) Bootstrap;;
    minimal   | -m) Minimal && Cleanup;;
    desktop   | -d) Minimal && Desktop && Cleanup;;
    laptop    | -l) Minimal && Desktop && Laptop && Cleanup;;
    server    | -s) Minimal && Server && Cleanup;;
    virtual   | -v) Minimal && Virtual && Cleanup;;

    *) echo "Available options:"
       printf "  bootstrap (-b), minimal (-m), desktop (-d), laptop (-l), server (-s), virtual (-v)"
       ;;
esac
