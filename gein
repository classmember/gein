#!/usr/bin/env sh

#
# gein is a script to simplify the process of installing Gentoo while still
# allowing users to customize their options. Like any installation script, this
# process is invasive and may interfere with your desired setup though attempts
# have been made to make this less painful.
#
# There have been a few updates to this file, and you may now adjust the
# settings the script will use though this needs additional work. Some tasks
# such as partitioning disks or selecting the GPU really should be automated
# though this is something that will likely be attempted later.
#


### Settings #####################################

## Settings
SwapSize="4G"

## Commands
Emerge="emerge -v"
Make="make -j${CPU_CORES}"

## Stage3
S3URL="http://distfiles.gentoo.org/releases"
S3Arch="amd64"
S3Date="20171005"

## Portage
Make_Conf="https://raw.githubusercontent.com/jcmdln/gein/master/etc/portage/make.conf"
Package_Env="https://raw.githubusercontent.com/jcmdln/gein/master/etc/portage/package.env"
Package_Use="https://raw.githubusercontent.com/jcmdln/gein/master/etc/portage/package.use"


### Bootstrap ####################################

Bootstrap() {
    ## Confirm the user has setup their disks
    echo "Please partition and mount your disks before continuing!" && \
    read -ep "Proceed with installation? [Y/N]: " Proceed && \
    if echo $Proceed | grep -iq "^n" ; then exit; fi

    ## Set time via ntpd
    ntpd -q -g

    ## Download and extract stage3 tarball
    cd /mnt/gentoo && \
    wget ${S3URL}/${S3Arch}/autobuilds/${S3Date}/stage3-${S3Arch}-${S3Date}.tar.bz2 && \
    tar xvjpf stage3-*.tar.bz2 --xattrs --numeric-owner

    ## Mount hardware devices
    mount -t proc /proc /mnt/gentoo/proc && \
    mount --rbind /sys  /mnt/gentoo/sys && \
    mount --make-rslave /mnt/gentoo/sys && \
    mount --rbind /dev  /mnt/gentoo/dev && \
    mount --make-rslave /mnt/gentoo/dev

    ## Setup '/swapfile'
    Swap_File="/mnt/gentoo/swapfile" && \
    if [ ! -e $Swap_File ]; then
        fallocate -l $Swap_Size $Swap_File && \
	mkswap $Swap_File && chmod 0600 $Swap_File && swapon $Swap_File
    fi

    ## Configure Portage
    wget $Make_Conf   -O /mnt/gentoo/etc/portage/make.conf && \
    rm -rf /mnt/gentoo/etc/portage/package.use && \
    wget $Package_Use -O /mnt/gentoo/etc/portage/package.use && \
    if [ -z $Package_Env ]; then
	wget $Package_Env -O /mnt/gentoo/etc/portage/package.env
    fi

    ## Setup Portage mirrors
    mkdir -vp /mnt/gentoo/etc/portage/repos.conf && \
    cp -v /mnt/gentoo/usr/share/portage/config/repos.conf \
      /mnt/gentoo/etc/portage/repos.conf/gentoo.conf && \
    cp -vL /etc/resolv.conf /mnt/gentoo/etc/

    ## Chroot into '/mnt/gentoo'
    cd /mnt/gentoo && chroot /mnt/gentoo /bin/bash
}


### Minimal ######################################

Minimal() {
    ## Automate counting available cores and other hardware tasks
    export CPU_CORES=$(grep -c ^processor /proc/cpuinfo) && \
    echo "CPU_CORES=$(grep -c ^processor /proc/cpuinfo)" >> /etc/profile

    ## Reload profile and update PS1
    source /etc/profile && export PS1="(chroot) $PS1"

    ## Sync Portage and select profile
    emerge-webrsync && eselect profile list && \
    read -ep "Which profile?: " TargetProfile && \
    eselect profile set $Target_Profile && \
    $Emerge --update --deep --newuse @world

    ## Set desired timezone
    ls /usr/share/zoneinfo && \
    read -ep "Target region: " Target_Region && \
    ls /usr/share/zoneinfo/${Target_Region} && \
    read -ep "Target city: " Target_City && \
    TimeZone=${Target_Region}"/"${Target_City} && \
    echo "${TimeZone}" > /etc/timezone && \
    emerge --config sys-libs/timezone-data

    ## Set desired locales
    nano /etc/locale.gen && \
    locale-gen && locale -a && eselect locale list && \
    read -ep "Target locale: " Target_Locale && \
    eselect locale set ${Target_Locale}

    ## Update environment
    env-update && source /etc/profile && export PS1="(chroot) $PS1"

    ## Emerge/install Linux kernel and modules
    $Emerge sys-kernel/gentoo-sources \
	    sys-kernel/linux-firmware \
	    sys-apps/pciutils \
	    sys-kernel/genkernel && \
    if grep -Rqi 'intel' /proc/cpuinfo; then $Emerge intel-microcode; fi && \
    cd /usr/src/linux && \
    $Make defconfig && $Make menuconfig && $Make && \
    $Make modules_install && $Make install && genkernel --install initramfs

    ## Configure '/etc/fstab/'
    echo "/swapfile none swap sw 0 0" >> /etc/fstab && nano /etc/fstab

    ## Install neworking packages &
    $Emerge --noreplace net-misc/netifrc && \
    $Emerge net-misc/dhcpcd

    ## Set desired hostname and update '/etc/hosts'
    read -ep "Hostname: " Target_Hostname && \
    echo hostname="$Target_Hostname" > /etc/conf.d/hostname

    ## Configure and install Grub
    $Emerge sys-boot/grub:2 && \
    read -ep "Where to install Grub: " Grub_Target && \
    grub-install $Grub_Target && \
    grub-mkconfig -o /boot/grub/grub.cfg

    ## Set root password
    passwd

    ## Optionally setup user
    read -ep "Setup a standard user? [Y/N]: " Proceed && \
    if echo $Proceed | grep -iq "^y"; then
        read -ep "Username: " Target_User && \
        useradd -m -G audio,wheel $Target_User && \
        passwd $Target_User
    fi
}


### Desktop ######################################

Desktop() {
    ## Pick which GPU driver to use
    echo "Available GPU drivers: AMD, Intel, Nouveau, Virt (vbox & vmware)" && \
    read -ep "Which GPU's do you have?: " Target_GPU && \
    shopt -s nocasematch && \
    case $Target_GPU in
        amd    ) export Active_GPU="amdgpu radeonsi radeon";;
        intel  ) export Active_GPU="intel";;
        nouveau) export Active_GPU="nouveau";;
	#nvidia) export Active_GPU="nvidia";;
        virt   ) export Active_GPU="virtualbox vmware";;
        *) echo "You must select one of the available options!";;
    esac && shopt -u nocasematch && \
    echo "Active_GPU=\"$Active_GPU\"" >> /etc/profile

    ## Install Desktop drivers and packages
    MAKEOPTS="-j1" $Emerge dev-util/cmake && \
    $Emerge x11-base/xorg-drivers \
	    x11-misc/wmctrl \
	    x11-misc/xdotool && \
    env-update && \
    source /etc/profile && \
    export PS1="(chroot) $PS1" && \
    $Emerge media-fonts/dejavu \
	    media-gfx/scrot \
	    media-sound/alsa-utils \
	    media-sound/cmus \
	    media-video/ffmpeg \
	    media-video/mpv \
	    net-misc/youtube-dl \
	    www-client/chromium \
	    www-client/firefox \
	    x11-misc/dmenu \
	    x11-misc/i3lock \
	    x11-misc/i3status \
	    x11-misc/xclip \
	    x11-terms/rxvt-unicode \
	    x11-wm/i3
}


### Laptop #######################################

Laptop() {
    $Emerge app-laptop/laptop-mode-tools \
	    net-misc/connman \
	    net-wireless/wpa_supplicant \
	    x11-apps/xbacklight && \
    rc-update add laptop_mode default
}

#Server() {}
#Virtual() {}


### Cleanup ######################################

Cleanup() {
    ## Install eclean
    $Emerge app-portage/gentoolkit \
	    app-admin/eclean-kernel && \

    ## Update @world, remove unused packages, and clean
    $Emerge -uDN @world && \
    $Emerge --depclean && \
    $Emerge --update --changed-use --deep @world && \
    eclean packages && \
    eclean-dist --deep --fetch-restricted && \

    ## Remove junk created during installation
    rm -rf /stage3*.tar.bz2 \
      /var/tmp/portage/
}


### Execution ####################################

shopt -s nocasematch && \
case $1 in
    bootstrap | -b) Bootstrap;;
    minimal   | -m) Minimal && Cleanup;;
    desktop   | -d) Minimal && Desktop && Cleanup;;
    laptop    | -l) Minimal && Desktop && Laptop && Cleanup;;

    *) echo "Available options for gein:"
       echo "  bootstrap (-b), minimal (-m), desktop (-d), laptop (-l)"
    ;;
esac && shopt -u nocasematch
